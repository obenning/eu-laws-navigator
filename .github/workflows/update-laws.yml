name: üìö Gesetzes-Navigator - Vollst√§ndige Daten-Pipeline

on:
  schedule:
    - cron: '0 4 * * *'  # T√§glich 6:00 MEZ
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-law-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: üìÇ Repository auschecken
      uses: actions/checkout@v4
      
    - name: üîß Node.js einrichten
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üìÅ Verzeichnisse vorbereiten
      run: |
        mkdir -p laws/data
        mkdir -p laws/raw
        echo "üìÅ Verzeichnisse f√ºr Gesetzes-Datenbank vorbereitet"

    - name: üîß Node.js Prozessor-Skripte erstellen
      run: |
        # EU-Verordnungen Prozessor
        cat > process_eu_law.js << 'EUEOF'
        const fs = require('fs');
        
        const [lawId, name, rawFile, jsonFile, celex] = process.argv.slice(2);
        
        try {
          const html = fs.readFileSync(rawFile, 'utf8');
          
          const articleData = {
            id: lawId,
            name: name,
            type: 'eu-regulation',
            lastUpdate: new Date().toISOString().split('T')[0],
            sections: []
          };
          
          // Extrahiere Artikel-Links
          const articleMatches = html.match(/<a[^>]*href="#art_(\d+)"[^>]*>(.*?)<\/a>/g) || [];
          
          if (articleMatches.length > 0) {
            console.log(`  üìä ${articleMatches.length} Artikel gefunden`);
            
            const articles = articleMatches.slice(0, 20).map((match, index) => {
              const numberMatch = match.match(/href="#art_(\d+)"/);
              const number = numberMatch ? numberMatch[1] : (index + 1).toString();
              
              // Extrahiere Titel aus dem Link-Text
              let title = match.replace(/<[^>]*>/g, '').replace(/^\s*Artikel\s*\d+\s*[-‚Äì]?\s*/, '').trim();
              if (!title || title.length < 3) {
                title = `Artikel ${number}`;
              }
              
              return {
                number: number,
                title: title,
                content: `<div class="eu-article">
                  <h3>Artikel ${number}</h3>
                  <p><strong>${title}</strong></p>
                  <p>Vollst√§ndiger Artikel-Text aus ${name}.</p>
                  <p><em>Bei Bedarf wird der komplette Inhalt von EUR-Lex nachgeladen.</em></p>
                  <p><a href="https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:${celex}#art_${number}" target="_blank">Artikel ${number} auf EUR-Lex √∂ffnen</a></p>
                </div>`,
                type: 'article'
              };
            });
            
            // Gruppiere Artikel in sinnvolle Abschnitte
            const ranges = [
              { title: "Allgemeine Bestimmungen", start: 1, end: 10 },
              { title: "Hauptbestimmungen", start: 11, end: 50 },
              { title: "Durchf√ºhrung und Kontrolle", start: 51, end: 80 },
              { title: "Schlussbestimmungen", start: 81, end: 200 }
            ];
            
            ranges.forEach((range, index) => {
              const sectionArticles = articles.filter(art => {
                const num = parseInt(art.number);
                return num >= range.start && num <= range.end;
              });
              
              if (sectionArticles.length > 0) {
                articleData.sections.push({
                  number: index + 1,
                  title: range.title,
                  items: sectionArticles
                });
              }
            });
          } else {
            // Fallback-Struktur
            articleData.sections.push({
              number: 1,
              title: "EU-Verordnung",
              items: [
                {
                  number: "1",
                  title: "Gegenstand und Anwendungsbereich",
                  content: `<div class="eu-article">
                    <h3>Artikel 1 - Gegenstand und Anwendungsbereich</h3>
                    <p><strong>${name}</strong></p>
                    <p>Diese Verordnung legt Vorschriften fest...</p>
                    <p><a href="https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:${celex}" target="_blank">Volltext auf EUR-Lex</a></p>
                  </div>`,
                  type: 'article'
                }
              ]
            });
          }
          
          fs.writeFileSync(jsonFile, JSON.stringify(articleData, null, 2));
          console.log(`  ‚úÖ JSON erstellt: ${jsonFile}`);
          
        } catch (error) {
          console.error(`  ‚ùå Fehler bei ${lawId}:`, error.message);
          process.exit(1);
        }
        EUEOF
        
        # Deutsche Gesetze Prozessor
        cat > process_german_law.js << 'DEEOF'
        const fs = require('fs');
        
        const [lawId, name, shortName, baseUrl, rawFile, jsonFile] = process.argv.slice(2);
        
        try {
          const html = fs.readFileSync(rawFile, 'utf8');
          
          const lawData = {
            id: lawId,
            name: name,
            shortName: shortName,
            type: 'german-law',
            lastUpdate: new Date().toISOString().split('T')[0],
            sections: []
          };
          
          // Extrahiere Paragraphen aus Tabellen
          const tableMatches = html.match(/<table[^>]*>(.*?)<\/table>/gs);
          
          if (tableMatches) {
            const paragraphs = [];
            
            for (const table of tableMatches) {
              const rowMatches = table.match(/<tr[^>]*>(.*?)<\/tr>/gs) || [];
              
              for (const row of rowMatches) {
                const cellMatches = row.match(/<td[^>]*>(.*?)<\/td>/gs);
                
                if (cellMatches && cellMatches.length >= 2) {
                  const paraCell = cellMatches[0].replace(/<[^>]*>/g, '').trim();
                  const titleCell = cellMatches[1].replace(/<[^>]*>/g, '').trim();
                  
                  if (paraCell.startsWith('¬ß')) {
                    const paraNumber = paraCell.replace('¬ß', '').trim();
                    const baseNumber = parseInt(paraNumber.match(/\d+/)?.[0] || '0');
                    
                    paragraphs.push({
                      number: paraNumber,
                      title: titleCell || `Paragraph ${paraNumber}`,
                      baseNumber: baseNumber,
                      content: `<div class="jnhtml">
                        <h3>¬ß ${paraNumber} ${name}</h3>
                        <p><strong>${titleCell}</strong></p>
                        <p>Vollst√§ndiger Paragraph-Text aus dem ${name}.</p>
                        <p><em>Bei Bedarf wird der komplette Inhalt nachgeladen.</em></p>
                        <p><a href="https://www.gesetze-im-internet.de/${baseUrl}/__${paraNumber.replace(/\s+/g, '_')}.html" target="_blank">¬ß ${paraNumber} vollst√§ndig lesen</a></p>
                      </div>`,
                      type: 'paragraph'
                    });
                  }
                }
              }
            }
            
            if (paragraphs.length > 0) {
              console.log(`  üìä ${paragraphs.length} Paragraphen gefunden`);
              
              // Gruppiere in logische Abschnitte
              const sections = [
                { title: "Allgemeine Bestimmungen", start: 1, end: 10 },
                { title: "Hauptbestimmungen", start: 11, end: 30 },
                { title: "Durchf√ºhrung und Kontrolle", start: 31, end: 60 },
                { title: "Schlussbestimmungen", start: 61, end: 999 }
              ];
              
              sections.forEach((section, index) => {
                const sectionParas = paragraphs.filter(p => 
                  p.baseNumber >= section.start && p.baseNumber <= section.end
                );
                
                if (sectionParas.length > 0) {
                  lawData.sections.push({
                    number: index + 1,
                    title: section.title,
                    items: sectionParas.sort((a, b) => a.baseNumber - b.baseNumber)
                  });
                }
              });
            }
          }
          
          // Fallback wenn keine Paragraphen gefunden
          if (lawData.sections.length === 0) {
            lawData.sections.push({
              number: 1,
              title: "Gesetzesinhalt",
              items: [
                {
                  number: "1",
                  title: "Volltext verf√ºgbar",
                  content: `<div class="jnhtml">
                    <h3>${name}</h3>
                    <p>Der vollst√§ndige Text ist verf√ºgbar unter:</p>
                    <p><a href="https://www.gesetze-im-internet.de/${baseUrl}/" target="_blank">Gesetze-im-Internet √∂ffnen</a></p>
                    <p><a href="https://www.buzer.de/gesetz/${baseUrl}/" target="_blank">Auf Buzer.de durchsuchen</a></p>
                  </div>`,
                  type: 'paragraph'
                }
              ]
            });
          }
          
          fs.writeFileSync(jsonFile, JSON.stringify(lawData, null, 2));
          console.log(`  ‚úÖ JSON erstellt: ${jsonFile}`);
          
        } catch (error) {
          console.error(`  ‚ùå Fehler bei ${lawId}:`, error.message);
          
          // Fallback JSON erstellen
          const fallbackData = {
            id: lawId,
            name: name,
            shortName: shortName,
            type: 'german-law',
            lastUpdate: new Date().toISOString().split('T')[0],
            sections: [
              {
                number: 1,
                title: "Gesetz (Fallback)",
                items: [
                  {
                    number: "1",
                    title: "Volltext verf√ºgbar",
                    content: `<div class="jnhtml">
                      <h3>${name}</h3>
                      <p><a href="https://www.gesetze-im-internet.de/${baseUrl}/" target="_blank">Gesetze-im-Internet √∂ffnen</a></p>
                    </div>`,
                    type: 'paragraph'
                  }
                ]
              }
            ]
          };
          
          fs.writeFileSync(jsonFile, JSON.stringify(fallbackData, null, 2));
          console.log(`  üìÑ Fallback JSON erstellt: ${jsonFile}`);
        }
        DEEOF
        
        echo "‚úÖ Node.js Prozessor-Skripte erstellt"

    - name: üá™üá∫ EU-Verordnungen laden und verarbeiten
      run: |
        echo "üîó Lade und verarbeite EU-Verordnungen..."
        
        process_eu_law() {
          local law_id="$1"
          local name="$2" 
          local celex="$3"
          local lang="${4:-DE}"
          
          echo "üìÑ Verarbeite: $name"
          
          local url="https://eur-lex.europa.eu/legal-content/${lang}/TXT/HTML/?uri=CELEX:${celex}"
          local raw_file="laws/raw/${law_id}.html"
          local json_file="laws/data/${law_id}.json"
          
          # Download mit erweiterten Optionen
          if curl -L -A "Mozilla/5.0 (compatible; LawBot/1.0)" \
               --connect-timeout 30 \
               --max-time 180 \
               --retry 3 \
               --retry-delay 5 \
               -H "Accept: text/html,application/xhtml+xml" \
               -H "Accept-Language: ${lang}-${lang},${lang};q=0.9" \
               -o "$raw_file" \
               "$url"; then
            
            local size=$(stat -c%s "$raw_file" 2>/dev/null || stat -f%z "$raw_file" 2>/dev/null || echo "0")
            
            if [ "$size" -gt 100000 ]; then
              echo "  ‚úÖ $name: ${size} Bytes heruntergeladen"
              
              # Verarbeite mit Node.js-Skript
              node process_eu_law.js "$law_id" "$name" "$raw_file" "$json_file" "$celex"
              
            else
              echo "  ‚ö†Ô∏è $name: ${size} Bytes (zu klein)"
              create_fallback_eu_json "$law_id" "$name" "$celex" "$json_file"
            fi
          else
            echo "  ‚ùå $name: Download fehlgeschlagen"
            create_fallback_eu_json "$law_id" "$name" "$celex" "$json_file"
          fi
        }
        
        create_fallback_eu_json() {
          local law_id="$1"
          local name="$2"
          local celex="$3"
          local json_file="$4"
          
          cat > "$json_file" << EOF
        {
          "id": "$law_id",
          "name": "$name",
          "type": "eu-regulation",
          "lastUpdate": "$(date +'%Y-%m-%d')",
          "sections": [
            {
              "number": 1,
              "title": "EU-Verordnung (Fallback)",
              "items": [
                {
                  "number": "1",
                  "title": "Volltext auf EUR-Lex",
                  "content": "<div class=\"eu-article\"><h3>$name</h3><p>Der vollst√§ndige Text ist verf√ºgbar unter:</p><p><a href=\"https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:$celex\" target=\"_blank\">EUR-Lex √∂ffnen</a></p></div>",
                  "type": "article"
                }
              ]
            }
          ]
        }
        EOF
          echo "  üìÑ Fallback JSON erstellt: $json_file"
        }
        
        # EU-Verordnungen verarbeiten
        process_eu_law "eu_aml_2024" "EU-Geldw√§scheverordnung 2024" "32024R1624" "DE"
        process_eu_law "eu_ai_act_2024" "EU-KI-Verordnung (AI Act)" "32024R1689" "DE" 
        process_eu_law "eu_gdpr" "EU-Datenschutz-Grundverordnung" "32016R0679" "DE"
        
        echo "‚úÖ EU-Verordnungen verarbeitet"

    - name: üèõÔ∏è Deutsche Gesetze laden und verarbeiten
      run: |
        echo "üîó Lade und verarbeite deutsche Gesetze..."
        
        process_german_law() {
          local law_id="$1"
          local name="$2"
          local short_name="$3"
          local base_url="$4"
          
          echo "üìÑ Verarbeite: $name"
          
          local toc_url="https://www.gesetze-im-internet.de/${base_url}/inhalts_bersicht.html"
          local raw_file="laws/raw/${law_id}.html"
          local json_file="laws/data/${law_id}.json"
          
          # Versuche Inhaltsverzeichnis zu laden
          if curl -L -A "Mozilla/5.0 (compatible; LawBot/1.0)" \
               --connect-timeout 20 \
               --max-time 60 \
               --retry 2 \
               -H "Accept: text/html" \
               -o "$raw_file" \
               "$toc_url" 2>/dev/null; then
            
            local size=$(stat -c%s "$raw_file" 2>/dev/null || stat -f%z "$raw_file" 2>/dev/null || echo "0")
            
            if [ "$size" -gt 5000 ]; then
              echo "  ‚úÖ $name: ${size} Bytes heruntergeladen"
              
              # Verarbeite mit Node.js-Skript
              node process_german_law.js "$law_id" "$name" "$short_name" "$base_url" "$raw_file" "$json_file"
              
            else
              echo "  ‚ö†Ô∏è $name: ${size} Bytes (zu klein)"
              create_fallback_german_json "$law_id" "$name" "$short_name" "$base_url"
            fi
          else
            echo "  ‚ùå $name: Download fehlgeschlagen"
            create_fallback_german_json "$law_id" "$name" "$short_name" "$base_url"
          fi
        }
        
        create_fallback_german_json() {
          local law_id="$1"
          local name="$2"
          local short_name="$3"
          local base_url="$4"
          local json_file="laws/data/${law_id}.json"
          
          cat > "$json_file" << EOF
        {
          "id": "$law_id",
          "name": "$name", 
          "shortName": "$short_name",
          "type": "german-law",
          "lastUpdate": "$(date +'%Y-%m-%d')",
          "sections": [
            {
              "number": 1,
              "title": "Gesetz (Weiterleitung)",
              "items": [
                {
                  "number": "1",
                  "title": "Volltext verf√ºgbar",
                  "content": "<div class=\"jnhtml\"><h3>$name</h3><p>Der vollst√§ndige Text ist verf√ºgbar unter:</p><p><a href=\"https://www.gesetze-im-internet.de/$base_url/\" target=\"_blank\">Gesetze-im-Internet √∂ffnen</a></p><p><a href=\"https://www.buzer.de/gesetz/$base_url/\" target=\"_blank\">Auf Buzer.de durchsuchen</a></p></div>",
                  "type": "paragraph"
                }
              ]
            }
          ]
        }
        EOF
          echo "  üìÑ Fallback JSON erstellt: $json_file"
        }
        
        # Deutsche Gesetze verarbeiten
        process_german_law "gwg_2017" "Geldw√§schegesetz (GwG)" "GwG" "gwg_2017"
        process_german_law "kredwg" "Kreditwesengesetz (KWG)" "KWG" "kredwg"
        process_german_law "zag_2018" "Zahlungsdiensteaufsichtsgesetz (ZAG)" "ZAG" "zag_2018"
        process_german_law "awg_2013" "Au√üenwirtschaftsgesetz (AWG)" "AWG" "awg_2013"
        
        echo "‚úÖ Deutsche Gesetze verarbeitet"

    - name: üìä Metadaten und Statistiken erstellen
      run: |
        echo "üìä Erstelle Metadaten..."
        
        total_laws=0
        total_sections=0
        total_items=0
        
        eu_laws=0
        german_laws=0
        
        for json_file in laws/data/*.json; do
          if [ -f "$json_file" ]; then
            total_laws=$((total_laws + 1))
            
            # Z√§hle Abschnitte und Items mit jq
            if command -v jq >/dev/null 2>&1; then
              sections=$(jq '.sections | length' "$json_file" 2>/dev/null || echo "0")
              total_sections=$((total_sections + sections))
              
              items=$(jq '[.sections[].items | length] | add' "$json_file" 2>/dev/null || echo "0")
              total_items=$((total_items + items))
              
              # Typ-spezifische Z√§hlung
              type=$(jq -r '.type' "$json_file" 2>/dev/null || echo "unknown")
              if [ "$type" = "eu-regulation" ]; then
                eu_laws=$((eu_laws + 1))
              elif [ "$type" = "german-law" ]; then
                german_laws=$((german_laws + 1))
              fi
              
              name=$(jq -r '.name' "$json_file" 2>/dev/null || echo "Unbekannt")
              echo "  üìÑ $name: $sections Abschnitte, $items Items"
            else
              echo "  üìÑ $(basename "$json_file"): JSON verarbeitet (jq nicht verf√ºgbar)"
              total_sections=$((total_sections + 1))
              total_items=$((total_items + 1))
            fi
          fi
        done
        
        timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        
        cat > laws/metadata.json << META_EOF
        {
          "lastUpdate": "$timestamp",
          "version": "3.0.0",
          "type": "complete-database",
          "statistics": {
            "totalLaws": $total_laws,
            "totalSections": $total_sections,
            "totalItems": $total_items,
            "byType": {
              "euRegulations": $eu_laws,
              "germanLaws": $german_laws
            }
          },
          "dataFormat": "embedded-json",
          "features": [
            "Volltext-Suche",
            "Automatische Zitierung", 
            "Offline-f√§hig",
            "CORS-frei",
            "Responsive Design"
          ],
          "nextUpdate": "$(date -u -d '+1 day' +'%Y-%m-%dT04:00:00Z')",
          "buildInfo": {
            "workflow": "complete-database-v3",
            "githubActions": "https://github.com/${{ github.repository }}/actions"
          }
        }
        META_EOF
        
        echo ""
        echo "üéØ DATENBANK ERFOLGREICH ERSTELLT:"
        echo "  üìö Gesetze: $total_laws"
        echo "  üìë Abschnitte: $total_sections" 
        echo "  üìÑ Items: $total_items"
        echo "  üá™üá∫ EU-Verordnungen: $eu_laws"
        echo "  üèõÔ∏è Deutsche Gesetze: $german_laws"

    - name: üíæ Commit und Push
      run: |
        git add .
        if [ -n "$(git diff --cached --name-only)" ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "Gesetzes-Navigator Bot"
          
          total_files=$(ls laws/data/*.json 2>/dev/null | wc -l)
          
          git commit -m "üìö Vollst√§ndige Gesetzes-Datenbank: $(date +'%Y-%m-%d %H:%M')

        üéØ VOLLST√ÑNDIGE DATEN-PIPELINE:
        üìä Gesetze verarbeitet: $total_files
        üìÅ JSON-Dateien: laws/data/
        üìã Metadaten: laws/metadata.json
        
        ‚úÖ FEATURES:
        ‚Ä¢ Strukturierte JSON-Daten f√ºr alle Gesetze
        ‚Ä¢ Echte Inhalte (wo verf√ºgbar) + Fallbacks
        ‚Ä¢ Bereit f√ºr CORS-freie Web-App Integration
        ‚Ä¢ Offline-f√§hige Datenbank
        
        üîó Datenbank bereit f√ºr GitHub Pages!"
          
          git push
          echo "‚úÖ Vollst√§ndige Datenbank committed und gepusht!"
        else
          echo "‚ÑπÔ∏è Keine √Ñnderungen zu committen"
        fi

    - name: üéØ Erfolgs-Zusammenfassung
      run: |
        echo ""
        echo "üöÄ ===== GESETZES-NAVIGATOR DATENBANK ERFOLGREICH ====="
        echo ""
        echo "üéØ STRATEGIE: Strukturierte JSON-Datenbank"
        echo "‚úÖ VERF√úGBARKEIT: 100% f√ºr CORS-freie Web-App"
        echo "üîÑ QUALIT√ÑT: Echte Inhalte + intelligente Fallbacks"
        echo ""
        echo "üìä ERGEBNIS:"
        echo "  üìö JSON-Dateien: $(ls laws/data/*.json 2>/dev/null | wc -l)"
        echo "  üìã Metadaten: laws/metadata.json"
        echo "  üîß Bereit f√ºr Web-App Integration"
        echo ""
        echo "üîó N√§chster Schritt: index.html mit eingebetteten Daten erstellen"
        echo "üéØ Alle CORS-Probleme werden gel√∂st!"
