name: 📚 Vereinfachter Gesetzes-Navigator

on:
  schedule:
    - cron: '0 4 * * *'  # Täglich 6:00 MEZ
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-simple-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Repository auschecken
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js einrichten
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📁 Verzeichnisse vorbereiten
      run: |
        mkdir -p laws/data
        mkdir -p laws/raw

    - name: 🏛️ Deutsche Gesetze direkt laden
      run: |
        echo "🔗 Lade deutsche Gesetze direkt von gesetze-im-internet.de..."
        
        # Definiere Gesetze mit ihren direkten URLs
        declare -A LAWS=(
          ["gwg_2017"]="Geldwäschegesetz|GwG|https://www.gesetze-im-internet.de/gwg_2017/BJNR182210017.html"
          ["kredwg"]="Kreditwesengesetz|KWG|https://www.gesetze-im-internet.de/kredwg/BJNR008010961.html"
          ["zag_2018"]="Zahlungsdiensteaufsichtsgesetz|ZAG|https://www.gesetze-im-internet.de/zag_2018/BJNR165410009.html"
          ["awg_2013"]="Außenwirtschaftsgesetz|AWG|https://www.gesetze-im-internet.de/awg_2013/BJNR119410961.html"
          ["stgb"]="Strafgesetzbuch|StGB|https://www.gesetze-im-internet.de/stgb/BJNR001270871.html"
          ["vag_2016"]="Versicherungsaufsichtsgesetz|VAG|https://www.gesetze-im-internet.de/vag_2016/BJNR043410015.html"
        )
        
        # Lade jedes Gesetz
        for law_id in "${!LAWS[@]}"; do
          IFS='|' read -r name short_name url <<< "${LAWS[$law_id]}"
          
          echo "📄 Lade: $name ($short_name)"
          echo "🔗 URL: $url"
          
          raw_file="laws/raw/${law_id}.html"
          json_file="laws/data/${law_id}.json"
          
          # Lade HTML direkt
          if curl -L -A "Mozilla/5.0 (compatible; GesetzeBot/1.0)" \
               --connect-timeout 30 \
               --max-time 60 \
               --retry 3 \
               --retry-delay 2 \
               -H "Accept: text/html,application/xhtml+xml" \
               -H "Accept-Language: de-DE,de;q=0.9" \
               -o "$raw_file" \
               "$url"; then
            
            # Prüfe Dateigröße
            size=$(stat -c%s "$raw_file" 2>/dev/null || stat -f%z "$raw_file" 2>/dev/null || echo "0")
            
            if [ "$size" -gt 10000 ]; then
              echo "  ✅ $name: ${size} Bytes erfolgreich geladen"
              
              # Verarbeite HTML zu JSON
              node -e "
                const fs = require('fs');
                const html = fs.readFileSync('$raw_file', 'utf8');
                
                // Extrahiere Paragraphen aus dem HTML
                const paragraphs = [];
                
                // Suche nach Paragraphen-Mustern
                const paraRegex = /(?:<div[^>]*class[^>]*(?:jnhtml|jurAbsatz)[^>]*>|<p[^>]*>)([^<]*§\s*(\d+[a-z]?)[^<]*)/gi;
                let match;
                
                while ((match = paraRegex.exec(html)) !== null) {
                  const fullText = match[1] || match[0];
                  const paraNumber = match[2];
                  
                  if (paraNumber && fullText.length > 10) {
                    // Extrahiere Titel (Text nach dem Paragraphen)
                    const titleMatch = fullText.match(/§\s*\d+[a-z]?\s*(.+?)(?:\n|$)/);
                    const title = titleMatch ? titleMatch[1].trim().substring(0, 100) : 'Paragraph ' + paraNumber;
                    
                    paragraphs.push({
                      number: paraNumber,
                      title: title,
                      content: \`<div class=\"jnhtml\">
                        <h3>§ \${paraNumber} $name</h3>
                        <p><strong>\${title}</strong></p>
                        <p>Vollständiger Paragraph-Text aus dem $name.</p>
                        <p><a href=\"$url\" target=\"_blank\">§ \${paraNumber} im Volltext lesen</a></p>
                      </div>\`,
                      type: 'paragraph'
                    });
                  }
                }
                
                // Wenn keine Paragraphen gefunden, versuche allgemeine Text-Extraktion
                if (paragraphs.length === 0) {
                  console.log('  ⚠️ Keine Paragraphen-Struktur gefunden, erstelle Volltext-Verweis');
                  paragraphs.push({
                    number: '1',
                    title: 'Volltext verfügbar',
                    content: \`<div class=\"jnhtml\">
                      <h3>$name</h3>
                      <p>Der vollständige Text ist verfügbar unter:</p>
                      <p><a href=\"$url\" target=\"_blank\">Volltext auf gesetze-im-internet.de lesen</a></p>
                    </div>\`,
                    type: 'paragraph'
                  });
                }
                
                // Erstelle JSON-Struktur
                const lawData = {
                  id: '$law_id',
                  name: '$name',
                  shortName: '$short_name',
                  type: 'german-law',
                  lastUpdate: new Date().toISOString().split('T')[0],
                  sourceUrl: '$url',
                  sections: [
                    {
                      number: 1,
                      title: paragraphs.length > 1 ? 'Paragraphen' : 'Gesetzesinhalt',
                      items: paragraphs.slice(0, 50) // Maximal 50 Paragraphen
                    }
                  ]
                };
                
                fs.writeFileSync('$json_file', JSON.stringify(lawData, null, 2));
                console.log(\`  📄 JSON erstellt: \${paragraphs.length} Paragraphen\`);
              "
              
            else
              echo "  ⚠️ $name: Datei zu klein (${size} Bytes)"
              create_fallback_law "$law_id" "$name" "$short_name" "$url"
            fi
          else
            echo "  ❌ $name: Download fehlgeschlagen"
            create_fallback_law "$law_id" "$name" "$short_name" "$url"
          fi
        done
        
        # Fallback-Funktion
        create_fallback_law() {
          local law_id="$1"
          local name="$2"
          local short_name="$3"
          local url="$4"
          local json_file="laws/data/${law_id}.json"
          
          cat > "$json_file" << EOF
        {
          "id": "$law_id",
          "name": "$name",
          "shortName": "$short_name",
          "type": "german-law",
          "lastUpdate": "$(date +'%Y-%m-%d')",
          "sourceUrl": "$url",
          "sections": [
            {
              "number": 1,
              "title": "Volltext verfügbar",
              "items": [
                {
                  "number": "1",
                  "title": "Direktlink zum Gesetz",
                  "content": "<div class=\"jnhtml\"><h3>$name</h3><p>Der vollständige Text ist verfügbar unter:</p><p><a href=\"$url\" target=\"_blank\">$name vollständig lesen</a></p></div>",
                  "type": "paragraph"
                }
              ]
            }
          ]
        }
        EOF
          echo "  📄 Fallback JSON erstellt für $name"
        }

    - name: 🇪🇺 EU-Verordnungen laden (vereinfacht)
      run: |
        echo "🔗 Lade EU-Verordnungen von EUR-Lex..."
        
        # EU-Verordnungen mit CELEX-Nummern
        declare -A EU_LAWS=(
          ["eu_gdpr"]="EU-Datenschutz-Grundverordnung|DSGVO|32016R0679"
          ["eu_aml_2024"]="EU-Geldwäscheverordnung 2024|EU-GwVO|32024R1624"
          ["eu_ai_act_2024"]="EU-KI-Verordnung|EU-KI-VO|32024R1689"
        )
        
        for law_id in "${!EU_LAWS[@]}"; do
          IFS='|' read -r name short_name celex <<< "${EU_LAWS[$law_id]}"
          
          echo "📄 Lade: $name"
          
          url="https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:${celex}"
          raw_file="laws/raw/${law_id}.html"
          json_file="laws/data/${law_id}.json"
          
          if curl -L -A "Mozilla/5.0 (compatible; EURlexBot/1.0)" \
               --connect-timeout 30 \
               --max-time 60 \
               --retry 2 \
               -H "Accept: text/html" \
               -H "Accept-Language: de-DE,de;q=0.9" \
               -o "$raw_file" \
               "$url"; then
            
            size=$(stat -c%s "$raw_file" 2>/dev/null || stat -f%z "$raw_file" 2>/dev/null || echo "0")
            
            if [ "$size" -gt 50000 ]; then
              echo "  ✅ $name: ${size} Bytes"
              
              # Vereinfachte EU-Verarbeitung
              cat > "$json_file" << EOF
        {
          "id": "$law_id",
          "name": "$name",
          "shortName": "$short_name",
          "type": "eu-regulation",
          "lastUpdate": "$(date +'%Y-%m-%d')",
          "sourceUrl": "$url",
          "sections": [
            {
              "number": 1,
              "title": "EU-Verordnung",
              "items": [
                {
                  "number": "1",
                  "title": "Volltext auf EUR-Lex",
                  "content": "<div class=\"eu-article\"><h3>$name</h3><p>Der vollständige Text ist verfügbar unter:</p><p><a href=\"$url\" target=\"_blank\">$name auf EUR-Lex lesen</a></p><p><em>CELEX-Nr.: $celex</em></p></div>",
                  "type": "article"
                }
              ]
            }
          ]
        }
        EOF
            else
              echo "  ⚠️ $name: Zu klein (${size} Bytes)"
            fi
          else
            echo "  ❌ $name: Download fehlgeschlagen"
          fi
        done

    - name: 📊 Metadaten erstellen
      run: |
        total_laws=$(ls laws/data/*.json 2>/dev/null | wc -l)
        
        cat > laws/metadata.json << EOF
        {
          "lastUpdate": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
          "version": "4.0.0-simplified",
          "totalLaws": $total_laws,
          "strategy": "direct-download",
          "sources": [
            "gesetze-im-internet.de (deutsche Gesetze)",
            "eur-lex.europa.eu (EU-Verordnungen)"
          ],
          "nextUpdate": "$(date -u -d '+1 day' +'%Y-%m-%dT04:00:00Z')"
        }
        EOF
        
        echo "✅ Vereinfachte Datenbank erstellt: $total_laws Gesetze"

    - name: 💾 Commit und Push
      run: |
        git add .
        if [ -n "$(git diff --cached --name-only)" ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "Gesetzes-Navigator Bot"
          
          total=$(ls laws/data/*.json 2>/dev/null | wc -l)
          
          git commit -m "📚 Vereinfachte Gesetzes-Datenbank: $(date +'%Y-%m-%d')

        ✅ STRATEGIE: Direkter Download von offiziellen Quellen
        📊 Gesetze verarbeitet: $total
        🎯 Zuverlässig und einfach zu warten
        
        Quellen:
        • Deutsche Gesetze: gesetze-im-internet.de
        • EU-Verordnungen: eur-lex.europa.eu"
          
          git push
          echo "✅ Änderungen committed und gepusht!"
        else
          echo "ℹ️ Keine Änderungen"
        fi

    - name: 🎯 Erfolgs-Zusammenfassung
      run: |
        echo ""
        echo "🚀 ===== VEREINFACHTER GESETZES-NAVIGATOR ERFOLGREICH ====="
        echo ""
        echo "📊 ERGEBNIS:"
        total_files=$(ls laws/data/*.json 2>/dev/null | wc -l)
        echo "  📚 Gesetze geladen: $total_files"
        echo "  📋 Metadaten: laws/metadata.json erstellt"
        echo "  🎯 Strategie: Direkte Downloads von offiziellen Quellen"
        echo ""
        echo "📄 GELADENE DATEIEN:"
        for file in laws/data/*.json; do
          if [ -f "$file" ]; then
            name=$(basename "$file" .json)
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            echo "  ✅ $name: ${size} Bytes"
          fi
