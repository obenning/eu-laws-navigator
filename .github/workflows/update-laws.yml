# .github/workflows/update-laws-improved.yml
name: üá™üá∫ EU & Deutsche Gesetze Auto-Update (Mehrere Quellen)

on:
  schedule:
    - cron: '0 4 * * *'  # T√§glich 6:00 MEZ
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/update-laws-improved.yml'

permissions:
  contents: write

jobs:
  update-laws:
    runs-on: ubuntu-latest
    
    steps:
    - name: üìÇ Repository auschecken
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìÅ Laws-Ordner vorbereiten
      run: |
        mkdir -p laws
        rm -f laws/*.html laws/*.json
        echo "üìÅ Laws-Ordner vorbereitet"

    # ===== EU-GESETZE (wie gehabt - funktionieren zuverl√§ssig) =====
    - name: üá™üá∫ EU-Verordnungen herunterladen
      run: |
        echo "üì• Lade EU-Verordnungen..."
        
        # EU-Geldw√§scheverordnung 2024
        curl -L -A "Mozilla/5.0 (GitHub-Actions)" \
          "https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:32024R1624" \
          -o laws/eu-aml-2024.html \
          --connect-timeout 30 --max-time 300 --retry 3
        
        # GDPR
        curl -L -A "Mozilla/5.0 (GitHub-Actions)" \
          "https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:32016R0679" \
          -o laws/eu-gdpr-2016.html \
          --connect-timeout 30 --max-time 300 --retry 3
        
        # AI Act
        curl -L -A "Mozilla/5.0 (GitHub-Actions)" \
          "https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:32024R1689" \
          -o laws/eu-ai-act-2024.html \
          --connect-timeout 30 --max-time 300 --retry 3
        
        # DSA
        curl -L -A "Mozilla/5.0 (GitHub-Actions)" \
          "https://eur-lex.europa.eu/legal-content/DE/TXT/HTML/?uri=CELEX:32022R2065" \
          -o laws/eu-dsa-2022.html \
          --connect-timeout 30 --max-time 300 --retry 3
          
        echo "‚úÖ EU-Verordnungen geladen"

    # ===== DEUTSCHE GESETZE - STRATEGIE 1: BUNDESTAG GITHUB REPOSITORY =====
    - name: üèõÔ∏è Deutsche Gesetze vom offiziellen Bundestag GitHub Repository
      run: |
        echo "üì• Strategie 1: Bundestag GitHub Repository"
        echo "üîó Quelle: https://github.com/bundestag/gesetze"
        
        # GitHub Raw URLs der wichtigsten Gesetze
        declare -A LAWS=(
          ["de-gwg-2017.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/g/gwg/index.md"
          ["de-kwg.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/k/kwg/index.md"
          ["de-zag-2018.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/z/zag_2018/index.md"
          ["de-awg.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/a/awg/index.md"
          ["de-awv-2013.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/a/awv_2013/index.md"
          ["de-stgb.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/s/stgb/index.md"
          ["de-vag-2016.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/v/vag_2016/index.md"
          ["de-kagb.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/k/kagb/index.md"
          ["de-wphg.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/w/wphg/index.md"
          ["de-eu-sanktdg.html"]="https://raw.githubusercontent.com/bundestag/gesetze/main/e/eusanktdg/index.md"
        )
        
        bundestag_success=0
        bundestag_total=${#LAWS[@]}
        
        for output_file in "${!LAWS[@]}"; do
          url="${LAWS[$output_file]}"
          law_name=$(basename "$output_file" .html)
          
          echo "üì• Versuche $law_name..."
          
          if curl -L -A "Mozilla/5.0 (GitHub-Actions)" \
            "$url" \
            -o "laws/$output_file" \
            --connect-timeout 15 \
            --max-time 60 \
            --retry 2 \
            --silent \
            --fail; then
            
            # Pr√ºfe ob es echtes Markdown ist (nicht 404-Seite)
            if [ -f "laws/$output_file" ] && \
               [ $(wc -c < "laws/$output_file") -gt 1000 ] && \
               grep -q "^#" "laws/$output_file"; then
              
              # Konvertiere Markdown zu HTML f√ºr Konsistenz
              echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>$law_name</title></head><body><div class='bundestag-law'>" > "laws/$output_file.tmp"
              cat "laws/$output_file" >> "laws/$output_file.tmp"
              echo "</div></body></html>" >> "laws/$output_file.tmp"
              mv "laws/$output_file.tmp" "laws/$output_file"
              
              echo "  ‚úÖ $law_name von Bundestag GitHub: $(wc -c < "laws/$output_file") Bytes"
              ((bundestag_success++))
            else
              echo "  ‚ö†Ô∏è $law_name: Datei zu klein oder ung√ºltig"
              rm -f "laws/$output_file"
            fi
          else
            echo "  ‚ùå $law_name: Download fehlgeschlagen"
          fi
        done
        
        echo ""
        echo "üìä Bundestag GitHub Ergebnis: $bundestag_success/$bundestag_total Gesetze"
        echo "BUNDESTAG_SUCCESS=$bundestag_success" >> $GITHUB_ENV
        echo "BUNDESTAG_TOTAL=$bundestag_total" >> $GITHUB_ENV

    # ===== STRATEGIE 2: OPEN LEGAL DATA API =====
    - name: üîì Restliche Gesetze von Open Legal Data API
      if: env.BUNDESTAG_SUCCESS < env.BUNDESTAG_TOTAL
      run: |
        echo "üì• Strategie 2: Open Legal Data API"
        echo "üîó Quelle: https://de.openlegaldata.io"
        
        # API-Endpoints f√ºr spezifische Gesetze (IDs m√ºssten recherchiert werden)
        declare -A OLD_LAWS=(
          ["de-gwg-2017.html"]="geldwaeschegesetz"
          ["de-kwg.html"]="kreditwesengesetz"
          ["de-zag-2018.html"]="zahlungsdiensteaufsichtsgesetz"
          ["de-awg.html"]="aussenwirtschaftsgesetz"
          ["de-stgb.html"]="strafgesetzbuch"
        )
        
        old_success=0
        
        for output_file in "${!OLD_LAWS[@]}"; do
          # Nur versuchen wenn Bundestag-Version fehlt
          if [ ! -f "laws/$output_file" ] || [ $(wc -c < "laws/$output_file") -lt 2000 ]; then
            law_slug="${OLD_LAWS[$output_file]}"
            law_name=$(basename "$output_file" .html)
            
            echo "üì• Versuche $law_name von Open Legal Data..."
            
            # Suche nach dem Gesetz √ºber die API
            if curl -s "https://de.openlegaldata.io/api/laws/?search=$law_slug&format=json" \
              -o "laws/temp_search.json" \
              --connect-timeout 10 \
              --max-time 30; then
              
              # Extrahiere erste Treffer-URL (vereinfacht)
              law_url=$(cat "laws/temp_search.json" | grep -o '"url":"[^"]*' | head -1 | cut -d'"' -f4)
              
              if [ -n "$law_url" ]; then
                echo "  üîó Gefunden: $law_url"
                
                if curl -s "$law_url?format=json" \
                  -o "laws/temp_law.json" \
                  --connect-timeout 10 \
                  --max-time 30; then
                  
                  # Konvertiere JSON zu HTML (vereinfacht)
                  echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>$law_name</title></head><body><div class='old-law'>" > "laws/$output_file"
                  cat "laws/temp_law.json" | jq -r '.content // .text // .body' >> "laws/$output_file" 2>/dev/null || echo "Inhalt von Open Legal Data" >> "laws/$output_file"
                  echo "</div></body></html>" >> "laws/$output_file"
                  
                  echo "  ‚úÖ $law_name von Open Legal Data: $(wc -c < "laws/$output_file") Bytes"
                  ((old_success++))
                fi
              fi
            fi
            
            # Cleanup
            rm -f "laws/temp_search.json" "laws/temp_law.json"
          fi
        done
        
        echo "üìä Open Legal Data Erfolge: $old_success"

    # ===== STRATEGIE 3: OFFENEGESETZE.DE API (f√ºr Bundesgesetzbl√§tter) =====
    - name: üìú Bundesgesetzbl√§tter von OffeneGesetze.de
      if: env.BUNDESTAG_SUCCESS < 5
      run: |
        echo "üì• Strategie 3: OffeneGesetze.de API"
        echo "üîó Quelle: https://offenegesetze.de"
        
        # Beispiel: Aktuelle Bundesgesetzbl√§tter mit relevanten Gesetzen
        if curl -s "https://api.offenegesetze.de/v1/veroeffentlichung/?year=2024&q=geldw√§sche&format=json" \
          -o "laws/bgbl_search.json" \
          --connect-timeout 15 \
          --max-time 30; then
          
          echo "  ‚úÖ BGBl-Daten abgerufen"
          
          # Erstelle eine Zusammenfassung der relevanten BGBl-Eintr√§ge
          cat > "laws/de-bgbl-2024.html" << 'EOF'
        <!DOCTYPE html>
        <html lang="de">
        <head>
          <meta charset="UTF-8">
          <title>Bundesgesetzblatt 2024 - Relevante Eintr√§ge</title>
        </head>
        <body>
          <div class="bgbl-summary">
            <h1>Bundesgesetzblatt 2024 - Relevante Eintr√§ge</h1>
            <p>Aktuelle Gesetzes√§nderungen aus dem Bundesgesetzblatt.</p>
            <p><strong>Quelle:</strong> OffeneGesetze.de API</p>
            <p><strong>Abgerufen:</strong> $(date)</p>
          </div>
        </body>
        </html>
        EOF
          
          sed -i "s/\$(date)/$(date)/g" "laws/de-bgbl-2024.html"
        fi

    # ===== STRATEGIEN 4: FALLBACK-INHALTE F√úR FEHLENDE GESETZE =====
    - name: üìÑ Fallback-Inhalte f√ºr fehlende deutsche Gesetze
      run: |
        echo "üìÑ Erstelle Fallback-Inhalte f√ºr fehlende Gesetze..."
        
        # Liste der erwarteten deutschen Gesetze
        declare -A EXPECTED_LAWS=(
          ["de-gwg-2017.html"]="Geldw√§schegesetz (GwG)"
          ["de-kwg.html"]="Kreditwesengesetz (KWG)"
          ["de-zag-2018.html"]="Zahlungsdiensteaufsichtsgesetz (ZAG)"
          ["de-awg.html"]="Au√üenwirtschaftsgesetz (AWG)"
          ["de-awv-2013.html"]="Au√üenwirtschaftsverordnung (AWV)"
          ["de-stgb.html"]="Strafgesetzbuch (StGB)"
          ["de-vag-2016.html"]="Versicherungsaufsichtsgesetz (VAG)"
          ["de-kagb.html"]="Kapitalanlagegesetzbuch (KAGB)"
          ["de-wphg.html"]="Wertpapierhandelsgesetz (WpHG)"
          ["de-eu-sanktdg.html"]="EU-Sanktions-Durchf√ºhrungsgesetz"
        )
        
        fallback_count=0
        
        for output_file in "${!EXPECTED_LAWS[@]}"; do
          law_name="${EXPECTED_LAWS[$output_file]}"
          
          # Pr√ºfe ob Datei fehlt oder zu klein ist
          if [ ! -f "laws/$output_file" ] || [ $(wc -c < "laws/$output_file") -lt 1500 ]; then
            echo "üìÑ Erstelle Fallback f√ºr $law_name..."
            
            cat > "laws/$output_file" << EOF
        <!DOCTYPE html>
        <html lang="de">
        <head>
          <meta charset="UTF-8">
          <title>$law_name - Fallback</title>
          <style>
            .fallback-notice { 
              background: #fff3cd; 
              border: 1px solid #ffeaa7; 
              padding: 20px; 
              margin: 20px; 
              border-radius: 8px;
              font-family: Arial, sans-serif;
            }
            .fallback-title { 
              color: #856404; 
              font-size: 1.5em; 
              margin-bottom: 15px; 
            }
            .fallback-content { 
              color: #856404; 
              line-height: 1.6; 
            }
            .fallback-links { 
              margin-top: 20px; 
              padding-top: 15px; 
              border-top: 1px solid #ffeaa7; 
            }
            .fallback-links a { 
              color: #0066cc; 
              text-decoration: none; 
              margin-right: 15px; 
            }
            .fallback-links a:hover { 
              text-decoration: underline; 
            }
          </style>
        </head>
        <body>
          <div class="fallback-notice">
            <div class="fallback-title">‚ö†Ô∏è $law_name</div>
            <div class="fallback-content">
              <p><strong>Automatischer Download nicht verf√ºgbar</strong></p>
              <p>Das Gesetz konnte nicht automatisch von den verf√ºgbaren Quellen geladen werden. 
                 Dies kann verschiedene Gr√ºnde haben:</p>
              <ul>
                <li>üõ°Ô∏è Bot-Schutz auf gesetze-im-internet.de</li>
                <li>üìÅ Noch nicht im Bundestag GitHub Repository</li>
                <li>üîÑ Tempor√§re Nichtverf√ºgbarkeit der APIs</li>
              </ul>
              <p><strong>N√§chster automatischer Versuch:</strong> Morgen um 6:00 Uhr</p>
              
              <div class="fallback-links">
                <strong>üìö Offizielle Quellen:</strong><br>
                <a href="https://www.gesetze-im-internet.de" target="_blank">üèõÔ∏è gesetze-im-internet.de</a>
                <a href="https://github.com/bundestag/gesetze" target="_blank">üìÇ Bundestag GitHub</a>
                <a href="https://de.openlegaldata.io" target="_blank">üîì Open Legal Data</a>
                <a href="https://offenegesetze.de" target="_blank">üìú OffeneGesetze.de</a>
              </div>
              
              <div style="margin-top: 20px; font-size: 0.9em; color: #666;">
                <strong>ü§ñ Letzte Aktualisierung:</strong> $(date +'%Y-%m-%d %H:%M') MEZ<br>
                <strong>üîÑ GitHub Actions Workflow:</strong> EU-Gesetzes Navigator Auto-Update
              </div>
            </div>
          </div>
        </body>
        </html>
        EOF
            
            # Ersetze Datum-Platzhalter
            sed -i "s/\$(date +'%Y-%m-%d %H:%M')/$(date +'%Y-%m-%d %H:%M')/g" "laws/$output_file"
            
            ((fallback_count++))
            echo "  üìÑ Fallback f√ºr $law_name erstellt"
          fi
        done
        
        echo ""
        echo "üìä Fallback-Dateien erstellt: $fallback_count"

    # ===== METADATEN UND STATISTIKEN =====
    - name: üìä Update-Metadaten und Statistiken erstellen
      run: |
        echo "üìä Erstelle detaillierte Metadaten..."
        
        # Z√§hle erfolgreiche Downloads
        eu_count=0
        de_real_count=0
        de_fallback_count=0
        
        # Pr√ºfe EU-Gesetze
        for eu_file in eu-aml-2024.html eu-gdpr-2016.html eu-ai-act-2024.html eu-dsa-2022.html; do
          if [ -f "laws/$eu_file" ] && [ $(wc -c < "laws/$eu_file") -gt 10000 ]; then
            ((eu_count++))
          fi
        done
        
        # Pr√ºfe deutsche Gesetze
        for de_file in de-gwg-2017.html de-kwg.html de-zag-2018.html de-awg.html de-awv-2013.html de-stgb.html de-vag-2016.html de-kagb.html de-wphg.html de-eu-sanktdg.html; do
          if [ -f "laws/$de_file" ]; then
            size=$(wc -c < "laws/$de_file")
            if [ $size -gt 5000 ] && ! grep -q "Automatischer Download nicht verf√ºgbar" "laws/$de_file"; then
              ((de_real_count++))
            else
              ((de_fallback_count++))
            fi
          fi
        done
        
        # Erstelle erweiterte Metadaten
        cat > laws/last-update.json << EOF
        {
          "last_update": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "update_strategies": [
            "üá™üá∫ EUR-Lex (EU-Verordnungen): Sehr zuverl√§ssig",
            "üèõÔ∏è Bundestag GitHub Repository: Zuverl√§ssig, offizielle Quelle",
            "üîì Open Legal Data API: Ehrenamtliches Projekt, 57.000+ Gesetze",
            "üìú OffeneGesetze.de: Bundesgesetzbl√§tter",
            "üìÑ Intelligent Fallbacks: Informative Platzhalter"
          ],
          "statistics": {
            "eu_laws": {
              "available": $eu_count,
              "total": 4,
              "success_rate": "$(echo "scale=1; $eu_count * 100 / 4" | bc)%"
            },
            "german_laws": {
              "real_content": $de_real_count,
              "fallbacks": $de_fallback_count,
              "total": 10,
              "success_rate": "$(echo "scale=1; $de_real_count * 100 / 10" | bc)%"
            }
          },
          "laws": {
            "eu-aml-2024": {
              "name": "EU-Geldw√§scheverordnung 2024",
              "celex": "32024R1624",
              "file": "eu-aml-2024.html",
              "type": "eu-regulation",
              "size": $(wc -c < laws/eu-aml-2024.html 2>/dev/null || echo 0),
              "source": "EUR-Lex"
            },
            "eu-gdpr-2016": {
              "name": "EU-Datenschutz-Grundverordnung",
              "celex": "32016R0679", 
              "file": "eu-gdpr-2016.html",
              "type": "eu-regulation",
              "size": $(wc -c < laws/eu-gdpr-2016.html 2>/dev/null || echo 0),
              "source": "EUR-Lex"
            },
            "eu-ai-act-2024": {
              "name": "EU-KI-Verordnung (AI Act)",
              "celex": "32024R1689",
              "file": "eu-ai-act-2024.html",
              "type": "eu-regulation", 
              "size": $(wc -c < laws/eu-ai-act-2024.html 2>/dev/null || echo 0),
              "source": "EUR-Lex"
            },
            "eu-dsa-2022": {
              "name": "Digital Services Act",
              "celex": "32022R2065",
              "file": "eu-dsa-2022.html",
              "type": "eu-regulation",
              "size": $(wc -c < laws/eu-dsa-2022.html 2>/dev/null || echo 0),
              "source": "EUR-Lex"
            }
        EOF
        
        # F√ºge deutsche Gesetze hinzu
        for de_file in de-gwg-2017.html de-kwg.html de-zag-2018.html de-awg.html de-awv-2013.html de-stgb.html de-vag-2016.html de-kagb.html de-wphg.html de-eu-sanktdg.html; do
          if [ -f "laws/$de_file" ]; then
            de_id=$(basename "$de_file" .html)
            size=$(wc -c < "laws/$de_file")
            
            # Bestimme Quelle
            if grep -q "bundestag-law" "laws/$de_file" 2>/dev/null; then
              source="Bundestag GitHub"
            elif grep -q "old-law" "laws/$de_file" 2>/dev/null; then
              source="Open Legal Data"
            elif grep -q "Automatischer Download nicht verf√ºgbar" "laws/$de_file" 2>/dev/null; then
              source="Fallback"
            else
              source="Unbekannt"
            fi
            
            cat >> laws/last-update.json << EOF
            ,
            "$de_id": {
              "name": "$(echo "$de_file" | sed 's/de-//; s/-/ /g; s/.html//' | sed 's/\b\w/\U&/g')",
              "file": "$de_file",
              "type": "german-law",
              "size": $size,
              "source": "$source"
            }
        EOF
          fi
        done
        
        # Schlie√üe JSON
        echo '  }' >> laws/last-update.json
        echo '}' >> laws/last-update.json
        
        echo "‚úÖ Erweiterte Metadaten erstellt"

    # ===== COMMIT UND PUSH =====
    - name: üîç √Ñnderungen pr√ºfen
      id: changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "üìù √Ñnderungen erkannt:"
          git status --porcelain
        else
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Keine √Ñnderungen"
        fi
    
    - name: üíæ √Ñnderungen committen und pushen
      if: steps.changes.outputs.changes_detected == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "EU & DE Laws Auto-Update Bot"
        
        git add laws/
        git commit -m "ü§ñ Multi-Source Update: EU-Gesetze & Deutsche Gesetze - $(date +'%Y-%m-%d %H:%M')"
        
        git push
        echo "‚úÖ Multi-Source Update erfolgreich gepusht!"

    # ===== DETAILLIERTE ZUSAMMENFASSUNG =====
    - name: üìã Workflow-Zusammenfassung
      run: |
        echo ""
        echo "üéâ ===== MULTI-SOURCE GESETZES-UPDATE ABGESCHLOSSEN ====="
        echo ""
        echo "üá™üá∫ EU-VERORDNUNGEN (EUR-Lex):"
        for eu_file in eu-aml-2024.html eu-gdpr-2016.html eu-ai-act-2024.html eu-dsa-2022.html; do
          if [ -f "laws/$eu_file" ]; then
            size=$(wc -c < "laws/$eu_file")
            if [ $size -gt 10000 ]; then
              echo "  ‚úÖ $eu_file: $size Bytes"
            else
              echo "  ‚ö†Ô∏è $eu_file: $size Bytes (m√∂glicherweise unvollst√§ndig)"
            fi
          else
            echo "  ‚ùå $eu_file: Nicht gefunden"
          fi
        done
        
        echo ""
        echo "üèõÔ∏è DEUTSCHE GESETZE (Multi-Source):"
        for de_file in de-gwg-2017.html de-kwg.html de-zag-2018.html de-awg.html de-awv-2013.html de-stgb.html de-vag-2016.html de-kagb.html de-wphg.html de-eu-sanktdg.html; do
          if [ -f "laws/$de_file" ]; then
            size=$(wc -c < "laws/$de_file")
            
            if grep -q "Automatischer Download nicht verf√ºgbar" "laws/$de_file"; then
              echo "  üìÑ $de_file: $size Bytes (Fallback)"
            elif grep -q "bundestag-law" "laws/$de_file"; then
              echo "  üèõÔ∏è $de_file: $size Bytes (Bundestag GitHub)"
            elif grep -q "old-law" "laws/$de_file"; then
              echo "  üîì $de_file: $size Bytes (Open Legal Data)"
            else
              echo "  ‚úÖ $de_file: $size Bytes"
            fi
          else
            echo "  ‚ùå $de_file: Nicht gefunden"
          fi
        done
        
        echo ""
        echo "üìä QUELLEN-√úBERSICHT:"
        echo "  üá™üá∫ EUR-Lex: Sehr zuverl√§ssig f√ºr EU-Verordnungen"
        echo "  üèõÔ∏è Bundestag GitHub: Offizielle deutsche Gesetze im Markdown-Format"
        echo "  üîì Open Legal Data: 57.000+ Gesetze, ehrenamtliches Projekt"
        echo "  üìú OffeneGesetze.de: Bundesgesetzbl√§tter"
        echo "  üìÑ Intelligent Fallbacks: Informative Platzhalter mit Links"
        echo ""
        echo "‚è∞ N√§chstes Update: Morgen um 6:00 Uhr MEZ"
        echo "üîó Repository: https://github.com/${{ github.repository }}/tree/main/laws"
        echo ""
        echo "üí° TIPP: Bundestag GitHub Repository ist die zuverl√§ssigste Quelle f√ºr deutsche Gesetze!"
